# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salries <- data.frame(employees, salaries_2017, adjustments)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salries <- data.frame(employees, salaries_2017, adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
#################
#### PART 1 #####
#################
#install.packages("stringr")
#library("stringr")
#install.packages("styler")
#library("styler")
#install.packages("lintr")
#library("lintr")
# Created a variable my_age set to my current age
my_age <-19
# Created a varibale my_name which contains my name
my_name <- "Armaan"
# Making a function make_introduction
# This function expects 2 arguments, name and age
# This function returns a character string
make_introduction <- function(name, age){
return(paste("Hello, my name is", name, "and I am", age, "years old"))
}
# Created a variable my_intro
# Assigning it to the function make_introduction
# Passing in it my_age and my_name and then printing it
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Created variable casual_intro
# Substituting text in it from my_intro and then printing it
casual_intro <- sub("Hello, my name is", "Hey, I'm",my_intro)
print(casual_intro)
# Created variable capital_intro
# Capitalizes each word and then printing it
capital_intro <- str_to_title(my_intro)
print(capital_intro)
# Created variable intro_e_count
# It extracts and stores every 'e' in the sentence
# Prints the variable
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
# Created a variable books which contains 6 books I like
books <- c("Babys Day out","Mein Kampf", "Merchant of venice","How to win friends and influence people","An American Marriage", "A long walk to water")
print(books)
# Created a variable top_three_books
# This variable consists of the first 3 books of the variable books
top_three_books <- books[1:3]
print(top_three_books)
# Created a variable book_reviews which prints 'is a great read!'
# in front of every book title
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Made a function remove_book which takes 2 arguments
# It removes the book title at a certain index
remove_book <- function(book_titles,index){
return(book_titles[-index])
}
# Created variable books_without_five
# This variable removes the book title at the 5th index
books_without_five <- remove_book(books, 5)
print(books_without_five)
# Created variable long_titles which contains
# every book title with more than 15 characters
long_titles <- books[nchar(books)>15]
print(long_titles)
#################
#### PART 3 #####
#################
# Created a variable numbers which contains values from 1 to 201
numbers <- 1:201
# Created variable squared_numbers which contains the square of each number
# present in the variable numbers
squared_numbers <- numbers*numbers
# Created a variable squared_mean which contains the
# average of the numbers present inside the variable squared_numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Created variable squared_median which contains the middle value
# of the numbers present in the variable squared_numbers
squared_median <- median(squared_numbers)
print(squared_median)
# Created variable perfect_squares which displays all the values
# in the variable numbers which are a perfect square
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
# Created 2 variables one to store the value and the other which will
# represent the first day of Spring break
spring_date <- "03-21-2020"
spring_break <- as.Date(spring_date,"%m-%d-%y")
# Checking the class type of the variable spring_break
class(spring_break)
# Created a variable which represents the current date
today <- Sys.Date()
# Created a variable days_to_break
# which represents the amount of days left from the current date
# till break
days_to_break <-spring_break - today
print(days_to_break)
# Made a function which takes two arguments, date and a year
# This function will replace the year of the date passed with
# the year passed within the function
change_year <- function(date,year){
date_as_string <- as.character(date)
month_day <- substr(date_as_string,5,10)
new_year <- paste0(year, month_day)
new_year_as_date <- as.Date(new_year,"%Y-%m-%d")
return(new_year_as_date)
}
# Testing the function by passing it in a new variable
# and then printing it
# Confirming the class of the new variable
change_year_2025 <- change_year(spring_break, 2025)
print(change_year_2025)
class(change_year_2025)
# Made a function date_has_passed which takes a single argument
# This function checks whether the provided date has already occured or not
date_has_passed <- function(date, ignore_year = FALSE ){
current_day <- Sys.Date()
occurence <- date - current_day
return(occurence<0)
if (ignore_year) {
date_ignore_year <- change_year(date,2020)
return(date_ignore_year - date < 0)
}
}
# Testing the function by passing the deadline of this assignment
# and then printing the result
print(date_has_passed(as.Date("2020-01-23","%Y-%m-%d")))
# Created a list named birthdays which contains birthdays
# of me and my immediate family
# Stored each of the birthday in a variable and then
# converted the varibale into dates and then stored the variable
kid <- "09-04-2000"
mother <- "07-31-1970"
father <- "07-25-1965"
birthdays <- list(Armaan = as.Date(kid,"%m-%d-%Y"), Gurpreet = as.Date(mother,"%m-%d-%Y"), Sajal =as.Date(father,"%m-%d-%Y"))
print(birthdays)
# Made a function which takes a single birthdate
# This function returns the coming birthday of the person after
# today's date by reusing already made functions
get_next_birthday <- function(birthdate){
birthday_occur <- change_year(birthdate, 2020)
if (date_has_passed(birthday_occur)) {
change_year(birthday_occur, 2021)
}
return(birthday_occur)
}
# Testing the function by passing my own birthday
get_next_birthday(birthdays$Armaan)
# Created a variable next_birthdays which holds the
# upcoming birthdays of each family member in the list
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salarie$salaries_2018 <- salries$salaries_2017 +salaries$adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salries$salaries_2017 +salaries$adjustments
print(salaries)
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salries$adjustments
# What was the 2018 salary of Employee 57
salaries[ salaries$employees == "Employee 57", "salaries_2018" ]
# How many employees got a raise?
nrow(salries$got_raise = TRUE)
# How many employees got a raise?
nrow(salries$got_raise == TRUE)
View(salries)
View(salaries)
# How many employees got a raise?
nrow(salries$got_raise == TRUE)
# How many employees got a raise?
nrow(salries$got_raise == FALSE)
# How many employees got a raise?
nrow(salries$got_raise > 0)
?nrow
# How many employees got a raise?
print(salaries$got_raise)
# How many employees got a raise?
print(salaries$got_raise > 0)
nrow(salaries[salries$got_raise > 0])
nrow(salaries[salries$got_raise < 0])
# How many employees got a raise?
print(salaries[salaries$got_raise > 0])
nrow(salaries[[salries$got_raise < 0, ]])
nrow(salaries[salries$got_raise < 0, ])
nrow(salaries[salries$got_raise > 0, ])
# How many employees got a raise?
print(salaries[salries$got_raise > 0, ])
# How many employees got a raise?
print(salaries[ ,salries$got_raise > 0])
nrow(salaries[salaries$got_raise > 0, ])
# How many employees got a raise?
print(salaries[ ,salaries$got_raise > 0])
?max
# What was the dollar value of the highest raise?
max(salaries$got_raise)
# What was the dollar value of the highest raise?
salaries[max(salaries$got_raise)]
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the dollar value of the highest raise?
print(max(got_raise))
# What was the dollar value of the highest raise?
View(salaries)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salries$salaries_2017 +salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salries$adjustments
View(salaries)
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the dollar value of the highest raise?
print(max(salaries$got_raise, na.rm = TRUE))
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salries$adjustments
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 +salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments
# What was the 2018 salary of Employee 57
salaries[ salaries$employees == "Employee 57", "salaries_2018" ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise > 0, ])
# What was the dollar value of the highest raise?
print(max(salaries$got_raise, na.rm = TRUE))
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the "name" of the employee who received the highest raise?
salaries[ "employees", 9269.526]
# What was the "name" of the employee who received the highest raise?
salaries[ "employees", "9269.526"]
# What was the "name" of the employee who received the highest raise?
print(salaries["employees"])
# What was the "name" of the employee who received the highest raise?
print(salaries[, "9269.526"])
# What was the "name" of the employee who received the highest raise?
print(salaries["employees", max(salaries$got_raise)])
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the "name" of the employee who received the highest raise?
print(salaries["employees", max("got_raise")])
# What was the "name" of the employee who received the highest raise?
print(salaries["employees", max("got_raise", na.rm =  TRUE)])
# What was the "name" of the employee who received the highest raise?
print(salaries["employees", max("salaries$got_raise")]
# What was the "name" of the employee who received the highest raise?
print(salaries["employees", max("salaries$got_raise")])
# What was the "name" of the employee who received the highest raise?
print(salaries[max(salaries$got_raise)])
salaries["employees", "9269.526"]
salaries[ , "9269.526"]
salaries[ , 9269.526]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employess"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries_2018)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 +salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments
# What was the 2018 salary of Employee 57
salaries[ salaries$employees == "Employee 57", "salaries_2018" ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise > 0, ])
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries_2018)
# What was the largest decrease in salaries between the two years?
print(min(salaries$got_raise))
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries_2017)
mean(salaries_2018)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 +salaries$adjustments
# What was the 2018 salary of Employee 57
salaries[ salaries$employees == "Employee 57", "salaries_2018" ]
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries_2017)
mean(salaries_2018)
mean(salaries_2018)
mean(salaries$adjustments)
mean(salaries_2017+salaries$adjustments)
# What was the average salary change?
mean(salaries_2017+salaries$adjustments)- mean(salaries_2017)
# For people who did not get a raise, how much money did they lose on average?
did_not_get_raise <- salaries[salaries$got_raise < 0]
# For people who did not get a raise, how much money did they lose on average?
did_not_get_raise <- salaries[salaries$got_raise < 0, ]
print(did_not_get_raise)
mean(did_not_get_raise)
print(salaries[salaries$got_raise < 0, ])
mean(salaries[salaries$got_raise < 0, ])
print(salaries$got_raise < 0)
# For people who did not get a raise, how much money did they lose on average?
did_not_get_raise <- salaries$got_raise < 0
mean(salaries$got_raise < 0)
salaries <- read.csv("salaries.csv", stringsAsFactors = FALSE)
getwd()
setwd("C:/Users/armaa/Desktop/INFO201/book-exercises/chapter-10-exercises/exercise-2")
salaries <- read.csv("chapter-10-exercises/exercise-2.csv", stringsAsFactors = FALSE)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, ]
mean(salaries[salaries$got_raise == FALSE, ]$adjustments)
# What was the average salary change?
mean(salaries_2017+salaries$adjustments)- mean(salaries_2017)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, ]
print(paycut)
print(paycut$adjustments)
mean(paycut$adjustments)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE,"adjustments" ]
mean(paycut)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 +salaries$adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments
# What was the 2018 salary of Employee 57
salaries[ salaries$employees == "Employee 57", "salaries_2018" ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise > 0, ])
# What was the dollar value of the highest raise?
print(max(salaries$got_raise))
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# What was the largest decrease in salaries between the two years?
print(min(salaries$got_raise))
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$adjustments == min(salaries$adjustments), "employees"]
# What was the average salary change?
mean(salaries_2017+salaries$adjustments)- mean(salaries_2017)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE,"adjustments" ]
mean(paycut)
mean(salaries[salaries$got_raise <0, ]$adjustments)
