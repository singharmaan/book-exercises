vote_count_2019 <- summarise(data_df, mean(vote_count)) %>%
pull(1)
return(list("analysis" = data_df, "mean" = vote_count_2019))
}
analyze_actor()
analyze_actor()
actor_analysis <- analyze_actor()
View(actor_analysis)
analysis
vote_count_2019
```{r echo=FALSE}
actor_analysis <-analyze_actor()
actor_analysis <-analyze_actor()
vote_count_2019
mean
vote_count_2019
```{r echo=FALSE}
actor_analysis <-analyze_actor()
analyze_actor <- function(){
endpoint <- "/discover/movie"
uri <- paste0(base_uri, endpoint)
params_list <- list("api_key" = tmdb_key)
response <- GET(uri, query = params_list)
body <- content(response, "text")
data <- fromJSON(body)
data_df <- data[["results"]]
data_df <- mutate(data_df, year_released = substring(release_date, 1, 4)) %>%
filter(year_released > 2017) %>%
filter(vote_count > 999) %>%
select(year_released, popularity, title,original_title, vote_count, vote_average)
vote_count_2019 <- summarise(data_df, mean(vote_count)) %>%
pull(1)
return(list("analysis" = data_df, "mean" = vote_count_2019))
}
analyze_actor()
mean_2019 <- actor_analysis$mean
mean_2019
new_df <- filter(data_df, max(vote_average))
new_df <- filter(data_df, vote_average == max(vote_average))
View(new_df)
new_df <- filter(data_df, vote_average == max(vote_average)) %>%
pull(3)
most_popular_2019 <- filter(data_df, vote_average == max(vote_average)) %>%
pull(3)
analyze_actor <- function(){
endpoint <- "/discover/movie"
uri <- paste0(base_uri, endpoint)
params_list <- list("api_key" = tmdb_key)
response <- GET(uri, query = params_list)
body <- content(response, "text")
data <- fromJSON(body)
data_df <- data[["results"]]
data_df <- mutate(data_df, year_released = substring(release_date, 1, 4)) %>%
filter(year_released > 2017) %>%
filter(vote_count > 999) %>%
select(year_released, popularity, title,original_title, vote_count, vote_average)
vote_count_2019 <- summarise(data_df, mean(vote_count)) %>%
pull(1)
most_popular_2019 <- filter(data_df, vote_average == max(vote_average)) %>%
pull(3)
return(list("analysis" = data_df, "mean_of_vote_count" = vote_count_2019, "Popular" = most_popular_2019))
}
analyze_actor()
actor_analysis <-analyze_actor()
raw_data <- actor_analysis$analysis
raw_data
data_df <- mutate(data_df, year_released = substring(release_date, 1, 4)) %>%
filter(year_released > 2017) %>%
filter(vote_count > 999) %>%
select(year_released, popularity, title,original_title, vote_count, vote_average) %>%
arrange(-popularity)
data_df <- data[["results"]]
data_df <- mutate(data_df, year_released = substring(release_date, 1, 4)) %>%
filter(year_released > 2017) %>%
filter(vote_count > 999) %>%
select(year_released, popularity, title,original_title, vote_count, vote_average) %>%
arrange(-popularity)
vote_count_2019 <- summarise(data_df, mean(vote_count)) %>%
pull(1)
most_popular_2019 <- filter(data_df, vote_average == max(vote_average)) %>%
pull(3)
return(list("analysis" = data_df, "mean_of_vote_count" = vote_count_2019, "Popular" = most_popular_2019))
analyze_actor <- function(){
endpoint <- "/discover/movie"
uri <- paste0(base_uri, endpoint)
params_list <- list("api_key" = tmdb_key)
response <- GET(uri, query = params_list)
body <- content(response, "text")
data <- fromJSON(body)
data_df <- data[["results"]]
data_df <- mutate(data_df, year_released = substring(release_date, 1, 4)) %>%
filter(year_released > 2017) %>%
filter(vote_count > 999) %>%
select(year_released, popularity, title,original_title, vote_count, vote_average) %>%
arrange(-popularity)
vote_count_2019 <- summarise(data_df, mean(vote_count)) %>%
pull(1)
most_popular_2019 <- filter(data_df, vote_average == max(vote_average)) %>%
pull(3)
return(list("analysis" = data_df, "mean_of_vote_count" = vote_count_2019, "Popular" = most_popular_2019))
}
analyze_actor()
actor_analysis <-analyze_actor()
mean_2019 <- actor_analysis$mean_of_vote_count
raw_data <- actor_analysis$analysis
raw_data <- actor_analysis$analysis
View(raw_data)
raw_data <- kable(actor_analysis$analysis)
#
analyze_actor <- function(){
endpoint <- "/discover/movie"
uri <- paste0(base_uri, endpoint)
params_list <- list("api_key" = tmdb_key)
response <- GET(uri, query = params_list)
body <- content(response, "text")
data <- fromJSON(body)
data_df <- data[["results"]]
data_df <- mutate(data_df, year_released = substring(release_date, 1, 4)) %>%
filter(year_released > 2017) %>%
filter(vote_count > 999) %>%
select(year_released, popularity, title,original_title, vote_count, vote_average) %>%
arrange(-popularity)
vote_count_2019 <- summarise(data_df, mean(vote_count)) %>%
pull(1)
most_popular_2019 <- filter(data_df, vote_average == max(vote_average)) %>%
pull(3)
return(list("analysis" = data_df, "mean_of_vote_count" = vote_count_2019, "Popular" = most_popular_2019))
}
analyze_actor()
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
sample(diamonds, 1000)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
setwd("C:/Users/armaa/Desktop/INFO201/a5-data-report-singharmaan")
?getwd()
getwd()
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample) +
geom_point(mapping = des(x= carat, y = price, color = clarity))
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, color = "blue"))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = cut, size = prize))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = cut, size = price))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x= carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x= carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_column(mapping = aes(x= cut, y = price))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x= cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x= cut, y = price, fill = clarity))
setwd("C:/Users/armaa/Desktop/INFO201/a5-data-report-singharmaan")
popular_movie <- actor_analysis$Popular
---
title: "Actor Analysis"
author: "Armaan Pruthi"
date: "2/12/2020"
output: html_document
---
```{r setup, include=FALSE}
source("analysis.R")
actor_name <- "Leonardo DiCaprio"
knitr::opts_chunk$set(echo = TRUE)
```
This is a report which includes the top 5 actors for the week `r Sys.Date()-7`. Not only this report shows the data for a particular actor but this also shows which were the most popular movie for the year 2019
## Trending Actors
`r kable(get_trending_table())`
## Leonardo DiCaprio
```{r echo=FALSE}
specific_actor <- get_actor_data(actor_name)
actor_url <- paste0("https://www.imdb.com/name/", specific_actor[["IMDB_ID"]], "/")
movies_list <- paste("-", specific_actor$Movies, collapse = "\n")
data <- specific_actor$INFO
```
This paragraph displays the data for the actor of my choosing. Here is the [link](`r actor_url`) to his IMDB page. Below are listed some of his top movies supported by the biography of the actor.
`r movies_list`
`r data`
### Most popular movie and some other data
```{r echo=FALSE}
actor_analysis <-analyze_actor()
mean_2019 <- actor_analysis$mean_of_vote_count
raw_data <- kable(actor_analysis$analysis)
popular_movie <- actor_analysis$Popular
```
In this section I selected the most popular movie from the data I accesed, that was, from the year 2019. This movie was `r popular_movie`. This movie was selected on the basis of the maximum of vote average it recieved in that year.
From the table below, I selected every movie and took the mean of vote count. The average of the vote count for the year 2019 is
`r mean_2019`
`r raw_data`
setwd("C:/Users/armaa/Desktop/INFO201/a5-data-report-singharmaan")
data <- fromJSON(body)
setwd("C:/Users/armaa/Desktop/INFO201/book-exercises/chapter-18-exercises/exercise-1")
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api_key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
# What kind of data structure did this produce? A data frame? A list?
class(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(body)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data$results)
View(data)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
class(data)
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api_key" = nyt_key)
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
class(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
View(query_params_list)
View(data)
View(response)
query_params_list <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
setwd("C:/Users/armaa/Desktop/INFO201/book-exercises/chapter-18-exercises/exercise-1")
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text")
data <- fromJSON(body)
# What kind of data structure did this produce? A data frame? A list?
class(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
names(data)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(data$)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = cut, size = price))
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds) +
geom_point(mapping = aes(x= carat, y = price, color = clarity))
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price), color = "blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, shape = cut))
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = cut, size = price))
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = cut, size = price, color = price))
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x= carat, y = price, color = cut))
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x= carat, y = price, color = cut))
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x= cut, y = price))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x= cut, y = price, fill = clarity))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x= carat, y = price, color = cut), alpha = 0.3)+
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
